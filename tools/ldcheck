#!/usr/bin/env python3

# Dynamic linking consistency checker
# hacked together by _that@xda, 2014-12 to 2022-03, and modified by mlm-games, 2024

import os
import string
import argparse


def ldcheck(files, libpath, printalldefined, printresolved, demangle):
    libs = files.copy()
    libswithpath = []

    # find all dependencies
    for filename in libs:
        if not os.path.isfile(filename) and libpath:
            filename = findlibraryinpath(filename, libpath)
        libswithpath.append(filename)
        with os.popen("readelf -d {0} | grep '\\\\(NEEDED\\\\)' | sed -r 's/.*\\[(.*)\\]/\\1/'".format(filename)) as f:
            for line in f:
                dependency = line.rstrip()
                if dependency not in libs:
                    libs.append(dependency)

    print("libs:", libswithpath)
    libsused = set()

    # read all defined symbols
    syms = {}
    for filename in libswithpath:
        for sym in readsymbols(filename, demangle):
            if sym["type"] != "NOTYPE" and sym["type"] != "U":  # Exclude undefined symbols
                # Store the symbol definition
                syms.setdefault(sym["name"], []).append({
                    'sym': sym,
                    'file': filename,
                    'lib_index': libswithpath.index(filename)
                })

    # resolve undefined
    for filename in libswithpath:
        for sym in readsymbols(filename, demangle):
            if sym["type"] == "U":  # Undefined symbol
                resolved = None
                defined_syms = syms.get(sym["name"], [])
                # Filter definitions matching the symbol version
                matching_defs = []
                for def_sym in defined_syms:
                    def_version = def_sym['sym']['version']
                    if sym['version']:
                        # Undefined symbol has a version; match exact version
                        if def_version == sym['version']:
                            matching_defs.append(def_sym)
                    else:
                        # Undefined symbol has no version; accept any version
                        matching_defs.append(def_sym)
                if matching_defs:
                    # Sort matching definitions by library index (search order)
                    matching_defs.sort(key=lambda x: x['lib_index'])
                    # Prefer GLOBAL over WEAK binding
                    for def_sym in matching_defs:
                        if def_sym['sym']['bind'] == 'GLOBAL':
                            resolved = def_sym
                            break
                    if not resolved:
                        for def_sym in matching_defs:
                            if def_sym['sym']['bind'] == 'WEAK':
                                resolved = def_sym
                                break
                if resolved:
                    libsused.add(resolved['file'])
                    if printresolved:
                        print("{0:25} {1:25} {2} {3}".format(filename, resolved['file'], resolved['sym']['type'], sym['name']))
                else:
                    print("{0:25} {1:25} U {2}".format(filename, "UNRESOLVED #####", sym['name']))
            else:
                if printalldefined:
                    print("{0:25}                  {1}".format(filename, sym["line"]))

    unused = set(libswithpath) - libsused
    if unused:
        print("unused:", unused)


def findlibraryinpath(filename, searchpath):
    for d in searchpath.split(os.pathsep):
        filepath = os.path.join(d, filename)
        if os.path.isfile(filepath):
            return filepath
    return filename


def parsesymbol(line, demangle):
    # Skip headers and empty lines
    if not line or line.startswith('Symbol table') or line.startswith('Num:') or line.startswith('   '):
        return None
    # Remove leading and trailing whitespace
    line = line.strip()
    # Split the line into parts; note that 'Name' may contain spaces
    parts = line.split()
    if len(parts) < 8:
        return None  # Not enough parts to be a valid symbol
    # Map the fields
    num = parts[0].rstrip(':')
    value = parts[1]
    size = parts[2]
    sym_type = parts[3]
    bind = parts[4]
    vis = parts[5]
    ndx = parts[6]
    # The rest is the name, which may contain spaces and versioning
    name_and_version = ' '.join(parts[7:])
    # Handle symbol versions
    name, version, is_default_version = parse_symbol_version(name_and_version)
    # Demangle the name if needed
    if demangle:
        with os.popen('c++filt "{0}"'.format(name)) as demangle_proc:
            name = demangle_proc.read().strip()
    sym = {
        'num': num,
        'value': value,
        'size': size,
        'type': sym_type,
        'bind': bind,
        'vis': vis,
        'ndx': ndx,
        'name': name,
        'version': version,
        'is_default_version': is_default_version,
        'line': line
    }
    return sym


def parse_symbol_version(name_and_version):
    name = name_and_version
    version = None
    is_default_version = False
    if '@@' in name:
        # The symbol has a default version
        name, version = name.split('@@', 1)
        is_default_version = True
    elif '@' in name:
        # The symbol has a non-default version
        name, version = name.split('@', 1)
    return name, version, is_default_version


def readsymbols(filename, demangle=False):
    command = "readelf -Ws {0}".format(filename)
    with os.popen(command) as f:
        for line in f:
            sym = parsesymbol(line.rstrip(), demangle)
            if sym:
                yield sym


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Check dynamic linkage consistency by matching defined vs unresolved symbols.')
    parser.add_argument('files', metavar='FILE', nargs='+', help="A dynamically linked executable or library.")
    parser.add_argument('-p', '--path', help="Search path for libraries (use like LD_LIBRARY_PATH)")
    parser.add_argument('-r', '--resolved', action='store_true', help="Print resolved symbols. By default only unresolved symbols are printed.")
    parser.add_argument('-a', '--alldefined', action='store_true', help="Print all defined symbols")
    parser.add_argument('-d', '--demangle', action='store_true', help="Demangle C++ names")

    args = parser.parse_args()
    ldcheck(args.files, args.path, args.alldefined, args.resolved, args.demangle)
